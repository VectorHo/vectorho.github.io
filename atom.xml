<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[VectorHo]]></title>
  <subtitle><![CDATA[here we go]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-11T16:15:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Vector Ho]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Node.js性能调优]]></title>
    <link href="http://yoursite.com/2015/10/11/web-nodejs-performance/"/>
    <id>http://yoursite.com/2015/10/11/web-nodejs-performance/</id>
    <published>2015-10-11T06:44:12.000Z</published>
    <updated>2015-10-11T16:15:17.000Z</updated>
    <content type="html"><![CDATA[<p><a href="/2015/10/11/web-nodejs-debug/">上篇文章</a>介绍了Node.js断言技术，现在我们再来说说有关性能调优相关技术。</p>
<h2 id="性能调优">性能调优</h2>
<p>说完了<code>Node.js</code>调试方面需要掌握的基本技能，下面说一下性能调优相关的技巧。
  <br>Node.js相比Java、PHP这些老牌语言，基础设施还是有所欠缺的：比如性能分析和监控工具等，加上它的单线程运行特性，在大型应用中，很容易让系统的CPU、内存或者事件队列太满达到瓶颈，从而导致程序崩溃。一旦发现程序警报CPU负载过高，或者内存飙高时，我们该如何排查Node.js代码存在的问题呢？首先先分析一下问题。</p>
<p>内存持高存在的因素：</p>
<ul>
  <li>缓存，很多人在code的时候把内存当缓存用，e.g. 使用js对象储存用户的session信息</li>
  <li>闭包，作用域长时间不能被释放掉</li>
  <li>生产者和消费者存在速度延迟，e.g. 数据库忙不过来，query队列堆积</li>
</ul>
<p>CPU负载过高可能因素：</p>
<ul>
  <li>垃圾回收频率过高、量太大，这一般是因为内存或者缓存暴涨导致的</li>
  <li>密集型的长循环计算，e.g. 大量遍历文件夹、大量计算等</li>
  <li>客户端并发数太大，e.g. 利用node作为socket服务端时，客户端连接数太大时，心跳处理也属于一次网络io，最终libuv转换成事件，严重影响业务消息发送</li>
</ul>
<p>这些问题都是让人头疼的，一个项目几十上百个文件，收到这些警报如果没有经验，根本无从下手排查。</p>
<p>最直接的手段就是分析 GC 日志，因为程序的一举一动都会反馈到 GC 上，而上述问题也会一一指向 GC，如：
  <br>内存暴涨，尤其是 Old Space 内存的暴涨，会直接导致 GC 的次数和时间增长
  <br>缓存增加，导致 GC 的时间增加，无用遍历过多
  <br>密集型计算，导致 GC Now Space次数增加</p>
<p><code>ps：</code>阿里出了一套调优工具<a href="http://alinode.aliyun.com/" target="_blank" rel="external">alinode</a>，看起来比较不错，感兴趣的童鞋可以试试，顺便反馈一下情况。😄</p>
<h3 id="内存管理">内存管理</h3>
<p>有关<code>Node.js</code>内存管理和垃圾回收机制，这里简单介绍一下，用心的同学可以去搜索一下这方面的资料。
  <br><code>V8</code>把内存分为 New Space 和 Old Space，New Space 的大小默认为 8M，Old Space 的大小默认为 0.7G，64位系统这两个数值翻倍。
  <br>对象的生命周期是：首先进入 New Space，然而 New Space 被平均分为两份，当一次GC运行后都会将其中一份的活着的对象复制到另一份，所以它的空间使用率是<code>50%</code>，这个算法叫做 Cheney 算法，这个操作叫做 Scavenge。再过一段时间，如果 New Space 中的对象还活着，这些对象会被挪到 Old Space 中去，GC 会每隔一段时间遍历 Old Space 中死掉的对象，然后整理碎片（这里有两种模式 mark-sweep 和 mark-compact，不赘述）。上面提到的<code>死掉的对象</code>指的是对象已经没有被引用了，或者说被引用的次数为零了。</p>
<h3 id="分析GC日志">分析GC日志</h3>
<p>上面说完Node.js内存管理后，下面我们开始分析具体问题了，e.g. 假设缓存增加（比如使用对象缓存了很多用户信息），GC 是不知道这些缓存死了还是活着的，他们会不停地查看这个对象，以及这个对象中的子对象是否还存活，如果这个对象数特别大，那么GC遍历的时间也会特别长。
  <br>当我们进行密集型计算的时候，会产生很多中间变量，这些变量往往在New Space中就死掉了，那么GC也会在这里多次地进行New Space区域的垃圾回收。
  <br>如何分析？
  <br>Node在启动程序的时候添加<code>--trace_gc</code>参数，当V8在进行垃圾回收的时候，会将垃圾回收的信息打印出来：
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ node --trace_gc test.js</span><br><span class="line">...</span><br><span class="line">[<span class="number">94036</span>]       <span class="number">68</span> ms: Scavenge <span class="number">8.4</span> (<span class="number">42.5</span>) -&gt; <span class="number">8.2</span> (<span class="number">43.5</span>) MB, <span class="number">2.4</span> ms [allocation failure].</span><br><span class="line">[<span class="number">94036</span>]       <span class="number">74</span> ms: Scavenge <span class="number">8.9</span> (<span class="number">43.5</span>) -&gt; <span class="number">8.9</span> (<span class="number">46.5</span>) MB, <span class="number">5.1</span> ms [allocation failure].</span><br><span class="line">[<span class="number">94036</span>] Increasing marking speed to <span class="number">3</span> due to high promotion rate</span><br><span class="line">[<span class="number">94036</span>]       <span class="number">85</span> ms: Scavenge <span class="number">16.1</span> (<span class="number">46.5</span>) -&gt; <span class="number">15.7</span> (<span class="number">47.5</span>) MB, <span class="number">3.8</span> ms (+ <span class="number">5.0</span> ms <span class="keyword">in</span> <span class="number">106</span> steps since last GC) [allocation failure].</span><br><span class="line">[<span class="number">94036</span>]       <span class="number">95</span> ms: Scavenge <span class="number">16.7</span> (<span class="number">47.5</span>) -&gt; <span class="number">16.6</span> (<span class="number">54.5</span>) MB, <span class="number">7.2</span> ms (+ <span class="number">1.3</span> ms <span class="keyword">in</span> <span class="number">14</span> steps since last GC) [allocation failure].</span><br><span class="line">[<span class="number">94036</span>]      <span class="number">111</span> ms: Mark-sweep <span class="number">23.6</span> (<span class="number">54.5</span>) -&gt; <span class="number">23.2</span> (<span class="number">54.5</span>) MB, <span class="number">6.2</span> ms (+ <span class="number">15.3</span> ms <span class="keyword">in</span> <span class="number">222</span> steps since start <span class="keyword">of</span> marking, biggest step <span class="number">0.3</span> ms) [GC interrupt] [GC <span class="keyword">in</span> old space requested].</span><br><span class="line">...</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>V8也提供了很多程序启动选项：</p>
<table>
  <thead>
    <tr>
      <th>选项</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>–max-stack-size</td>
      <td>设置栈大小</td>
    </tr>
    <tr>
      <td>–v8-options</td>
      <td>打印V8相关命令</td>
    </tr>
    <tr>
      <td>–trace-bailout</td>
      <td>查找不能被优化的函数，重写</td>
    </tr>
    <tr>
      <td>–trace-deopt</td>
      <td>查找不能优化的函数</td>
    </tr>
  </tbody>
</table>
<p>这些选项可以让我们查看V8在执行时的各种log日志，对于排查隐晦问题比较有用。</p>
<p>然而这堆日志看起来很糟糕，可以先将日志输出来之后交给专业的工具帮我们分析，相信大部分人都用Chrome DevTools的JavaScript CPU Profile：
  <br>
</p>
<p>通过Profile工具可以找到具体函数在整个程序中的执行时间和执行时间占比，从而分析到具体的代码问题，V8 也提供了Profile日志导出：
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line">node --prof test.js</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>执行命令之后，会在该目录下产生一个 *-v8.log 的日志文件，我们可以安装一个日志分析工具 tick:</p>
<figure class="highlight js">
  <table>
    <tr>
      <td class="code"><pre><span class="line">➜  $ sudo npm install tick -g</span><br><span class="line">➜  $ node-tick-processor *-v8.log</span><br><span class="line">[Top down (heavy) profile]:</span><br><span class="line">  Note: callees occupying less than <span class="number">0.1</span>% are not shown.</span><br><span class="line">  inclusive      self           name</span><br><span class="line">  ticks   total  ticks   total</span><br><span class="line">    <span class="number">426</span>   <span class="number">36.7</span>%      <span class="number">0</span>    <span class="number">0.0</span>%  <span class="built_in">Function</span>: ~<span class="xml"><span class="tag">&lt;<span class="title">anonymous</span>&gt;</span> node.js:27:10</span><br><span class="line">    426   36.7%      0    0.0%    LazyCompile: ~startup node.js:30:19</span><br><span class="line">    410   35.3%      0    0.0%      LazyCompile: ~Module.runMain module.js:499:26</span><br><span class="line">    409   35.2%      0    0.0%        LazyCompile: Module._load module.js:273:24</span><br><span class="line">    407   35.1%      0    0.0%          LazyCompile: ~Module.load module.js:345:33</span><br><span class="line">    406   35.0%      0    0.0%            LazyCompile: ~Module._extensions..js module.js:476:37</span><br><span class="line">    405   34.9%      0    0.0%              LazyCompile: ~Module._compile module.js:378:37</span><br><span class="line">...</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>也可以使用headdump之类的工具将日志导出，然后放到Chrome的Profile中去分析，如果看过深入浅出node.js的童鞋可以参考内存调优的章节。</p>
<h2 id="总结">总结</h2>
<p>对于任何一门程序而已，内存调优都是比较难的，这方面是需要智慧和经验，然而并不要被困难吓到，不断去折腾，相信每一次都会有新的收获。</p>
<p>参考：
  <br><a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a>
  <br><a href="https://iojs.org" target="_blank" rel="external">https://iojs.org</a>
  <br><a href="http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/" target="_blank" rel="external">http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/</a></p>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="/2015/10/11/web-nodejs-debug/">上篇文章</a>介绍了Node.js断言技术，现在我们再来说说有关性能调优相关技术。</p>
<h2 id="性能调优">性能调优</h2>
<p>说完了<code>Node.js</code>]]>
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="web技术" scheme="http://yoursite.com/categories/web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node.js断言方案]]></title>
    <link href="http://yoursite.com/2015/10/11/web-nodejs-debug/"/>
    <id>http://yoursite.com/2015/10/11/web-nodejs-debug/</id>
    <published>2015-10-11T06:44:12.000Z</published>
    <updated>2015-10-12T07:50:13.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>是什么？Node.js适合什么场景？多少公司已用于生产环境？Node.js靠不靠谱？这个话题应该无可厚非了，如果今天还在质疑Node.js的能力，相信它一定不是一家面向互联网公司。
  <br>自 2009 年<code>Ryan Dahl</code>发布后，到现在已经六个年头了。人红是非多，先后经历了ruby、php web擂台之战，后因某些原因派生出了<a href="https://iojs.org" target="_blank" rel="external">iojs</a>这个兄弟；分久必合，大势所趋。最近两兄弟又合体了，衍生出了Node.js V4.0版本，官方又解释这个版本是Node.js V1.0 新版本，原班人马重新回归。关于1.0新时代，有兴趣的童鞋请参考详情：<a href="http://mp.weixin.qq.com/s?__biz=MzAxMTU0NTc4Nw==&amp;mid=239799758&amp;idx=1&amp;sn=9762fe70f14829e7bd42fb1f35a6362e&amp;scene=23&amp;srcid=1011W2vcX80qGPXQEhjJAeB5#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzAxMTU0NTc4Nw==&amp;mid=239799758&amp;idx=1&amp;sn=9762fe70f14829e7bd42fb1f35a6362e&amp;scene=23&amp;srcid=1011W2vcX80qGPXQEhjJAeB5#rd</a>。
  <br>btw，po一个js全栈图：
  <br><img src="/2015/10/11/web-nodejs-debug/nodejs.png" alt="[js全栈示例]" title="[js全栈示例]"></p>
<h2 id="断言调试">断言调试</h2>
<p>我们日常使用<code>IDE</code>工具，实际上很多<code>IDE</code>工具已经集成了Node.js的调试工具；
  <br>比如Eclipse、webStorm等等，他们断言的原理是利用Node.js的<code>Debugger</code>内建模块，然后在这个基础上进行了封装。</p>
<h3 id="Debugger内建模块">Debugger内建模块</h3>
<p>Node.js提供的内建Debugger模块十分强大，它告诉V8，在执行代码的时候中断程度，等待开发者操控代码的执行进度。</p>
<ul>
  <li>
    <p><a href="#">立即调试模式</a>:
      <br>一般用于程序主动执行方式，比如一个程序计算某种结果，并非要监听某个端口来等待请求。</p>
    <p><code>node debug xx.js</code> // 利用命令行来向5858端口传送调试指令</p>
  </li>
  <li>
    <p><a href="#">等待调试模式</a>:
      <br>正好与立即模式相反，常用于web程序 e.g. express要调试，必须使用这种方式启动，然后当请求来了才能进行调试，并非程序马上执行的类型。</p>
    <p><code>node --debug xx.js</code> // 监听5858默认端口接收调试命令
      <br><code>node --debug-brk=8080 xx.js</code> // 监听8080端口来接收调试指令</p>
  </li>
</ul>
<h4 id="立即调试模式">立即调试模式</h4>
<p><code>see</code> test.js
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">var</span> world = <span class="string">'nodejs'</span>;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">var</span> hello_world = hello + <span class="string">' '</span> + world;</span><br><span class="line"><span class="built_in">console</span>.log(hello_world);</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>执行命令：<code>node debug test.js</code> 就可以进入调试模式。
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ node debug test.js</span><br><span class="line">&lt; <span class="keyword">debugger</span> listening on port <span class="number">5858</span></span><br><span class="line">connecting... ok</span><br><span class="line"><span class="keyword">break</span> <span class="keyword">in</span> helloword-debug.js:<span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">var</span> hello = <span class="string">'hello'</span>;</span><br><span class="line">  <span class="number">2</span> <span class="keyword">var</span> world = <span class="string">'nodejs'</span>;</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">debug&gt; help</span><br><span class="line">Commands: run (r), cont (c), next (n), step (s), out (o), backtrace (bt), setBreakpoint (sb), clearBreakpoint (cb),</span><br><span class="line">watch, unwatch, watchers, repl, restart, kill, list, scripts, breakOnException, breakpoints, version</span><br><span class="line">debug&gt;</span><br><span class="line">debug&gt; n</span><br><span class="line"><span class="keyword">break</span> <span class="keyword">in</span> helloword-debug.js:<span class="number">2</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">var</span> hello = <span class="string">'hello'</span>;</span><br><span class="line">  <span class="number">2</span> <span class="keyword">var</span> world = <span class="string">'nodejs'</span>;</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">  <span class="number">4</span> <span class="keyword">debugger</span>;</span><br><span class="line">debug&gt; repl</span><br><span class="line">Press Ctrl + C to leave debug repl</span><br><span class="line">&gt; hello</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h4 id="等待调试模式">等待调试模式</h4>
<figure class="highlight js">
  <table>
    <tr>
      <td class="code"><pre><span class="line">➜  $ node --debug test.js <span class="comment">// 告知V8，test.js在默认端口5858上接收指令</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>当我们使用<code>debug</code>参数打开一个node文件时，会输出这样一行文字：
  <br><img src="/2015/10/11/web-nodejs-debug/node-debug.png" alt="[--debug]" title="[--debug]">
  <br>打开浏览器访问 <a href="http://localhost:5858" target="_blank" rel="external">http://localhost:5858</a>：
  <br><img src="/2015/10/11/web-nodejs-debug/debug.png" alt="[node --debug test.js]" title="[node --debug test.js]"></p>
<p><code>--debug</code>其实是告诉用户<code>Node</code>在运行脚本时启动了内建debugger功能，并监听5858端口来处理传输的的调试命令。
  <br>这里强调一下，如果要进行远程调试，还要结合node debug来实现：</p>
<ul>
  <li>
    <p>服务端(程序)：</p>
    <figure class="highlight js">
      <table>
        <tr>
          <td class="code"><pre><span class="line">➜  $ node --debug server.js <span class="comment">// 通知V8开启调试功能，等待接收调试指令</span></span><br></pre></td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p>客户端(终端)： </p>
    <figure class="highlight js">
      <table>
        <tr>
          <td class="code"><pre><span class="line">node debug &lt;URI&gt;， 通过 URI 连接调试，e.g. node debug &lt;服务器IP&gt;:<span class="xml"><span class="tag">&lt;<span class="title">调试端口，默认5858</span>&gt;</span></span><br><span class="line">node debug -p <span class="tag">&lt;<span class="title">pid</span>&gt;</span> 通过 PID 链接调试</span><br><span class="line">node debug localhost:5858</span><br><span class="line">➜  $ node debug localhost:5858 // 客户端可以远程调试--debug启动server.js</span></span><br></pre></td>
        </tr>
      </table>
    </figure>
  </li>
</ul>
<p>当然如果要修改默认端口，可以用选项<code>--debug-brk=8080</code>这样的方式：
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ node --debug-brk=<span class="number">8080</span> xx.js <span class="comment">// 通知V8开启调试功能，等待接收调试指令</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="推荐node-inspector神器">推荐node-inspector神器</h3>
<p>Node.js断言技术有很多种方式，本质都是基于Node.js本身提供的debugger原理。
  <br>推荐用户使用<a href="https://www.npmjs.com/package/node-inspector" target="_blank" rel="external">node-inspector</a>原因是它不依赖某个IDE，接近原生且更加灵活，并且可以断言coffee预处理js。
  <br>所以下面来讲讲Node.js神器<a href="https://www.npmjs.com/package/node-inspector" target="_blank" rel="external">node-inspector</a>。
  <br><code>node-inspector</code>就是用了上述<code>等待调试模式</code>原理，另外加上websocket技术传输信息，并且提供GUI方便用户调试。</p>
<h4 id="原理">原理</h4>
<p>node-inspector提供一个web server作为GUI接收用户的指令，然后内部用websocket协议与需要被调试的程序进行实时交互。
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">用户指令 ---GUI--<span class="number">8080</span>---&gt; node-inspector ---websocket--<span class="number">5858</span>---&gt; node\<span class="string">'s debugger</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h4 id="实践">实践</h4>
<ul>
  <li>
    <p>安装node-inspector：</p>
    <figure class="highlight js">
      <table>
        <tr>
          <td class="code"><pre><span class="line">➜  $ npm install -g node-inspector <span class="comment">// 安装node-inspector</span></span><br></pre></td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p>启动node-inspector：
      <br>开启一个终端窗口，执行如下</p>
    <figure class="highlight js">
      <table>
        <tr>
          <td class="code"><pre><span class="line">➜  $ node-inspector <span class="comment">// 直接监听默认端口8080</span></span><br><span class="line">➜  $ node-inspector --web-port <span class="number">8080</span> --debug-port <span class="number">5858</span></span><br></pre></td>
        </tr>
      </table>
    </figure>
    <p><code>--web-port</code>是<code>Chrome Devtools</code>的调试页面端口，<code>--debug-port</code>为Node.js启动的内建debug端口，即需被调试的程序xx.js <code>node --debug-brk=5858 xx.js</code> 等待接收调试指令的端口! 😄</p>
  </li>
  <li>
    <p>启动被调试程序：
      <br>再开启一个终端窗口，执行如下</p>
    <figure class="highlight js">
      <table>
        <tr>
          <td class="code"><pre><span class="line">➜  $ node --debug-brk=<span class="number">5858</span> test.js || node --debug test.js</span><br><span class="line">     或者</span><br><span class="line">➜  $ node-debug test.js</span><br></pre></td>
        </tr>
      </table>
    </figure>
  </li>
</ul>
<p>可以在 <a href="http://localhost:8080/debug?port=5858" target="_blank" rel="external">http://localhost:8080/debug?port=5858</a> 打开node-inspector页面，调试使用<code>--debug(-brk)</code>或<code>node-debug</code>参数启动的程序。
  <br><img src="/2015/10/11/web-nodejs-debug/inspector-ui.png" alt="[inspector GUI]" title="[inspector GUI]">
  <br>更多设置可以查阅<a href="https://www.npmjs.com/package/node-inspector" target="_blank" rel="external">官方文档</a>。</p>
<p><code>tips：</code>这里提示一下利用node-inspector调试coffeescript程序时的设置，开启node-inspector方式一样，但启动需要被调试的程序有点不一样，如下。
  <br>
  <figure class="highlight js">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ coffee --nodejs --debug xx.coffee</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="FAQ">FAQ</h3>
<p>注意,如果出现
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ Failed to open socket on port <span class="number">5858</span>, waiting <span class="number">1000</span> ms before retrying</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>请结束掉所有debug进程
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">➜  $ ps -ef|grep debug-brk|awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -<span class="number">9</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h2 id="总结">总结</h2>
<p>只有真正理解了一门语言提供的debug技术的原理，才能更加熟练地使用它来调试程序。</p>
<p>参考：
  <br><a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a>
  <br><a href="https://iojs.org" target="_blank" rel="external">https://iojs.org</a></p>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>是什么？Node.js适合什么场景？多少公司已用于生产环境？Node.js靠不靠谱？这个话题应该无可厚非了，如果今天还在质疑Node]]>
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="web技术" scheme="http://yoursite.com/categories/web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OS X El Capitan 快速更新]]></title>
    <link href="http://yoursite.com/2015/10/02/mac-osx-capitan/"/>
    <id>http://yoursite.com/2015/10/02/mac-osx-capitan/</id>
    <published>2015-10-01T23:26:19.000Z</published>
    <updated>2015-10-02T01:02:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前奏">前奏</h2>
<p>总所周知，<a href="#">app store</a> 国内下载速度实在不敢恭维，然而系统升级一般没个一天是搞不定的（心中有一万只草泥马在奔腾ಥ_ಥ）。
  <br>但是，你们天真地以为这就能难倒技术控了么？23333…</p>
<p>今天小弟就给看官们带来一次全新体验。</p>
<h2 id="原理">原理</h2>
<p>抓取苹果官方下载链接，离线到第三方服务器分流。再使用第三方下载工具下载系统<code>.pkg</code>文件。搭建本地静态文件<code>server</code>，
  <br>将苹果官方的下载地址解析到本地的服务器，从而实现快速下载安装。</p>
<p>抓取工具首推charles（本人和charles不存在隶属关系^.^）。</p>
<p><code>ps</code>：以上适用于 El Capitan 更新慢的用户，有百兆光纤的用户可忽略。</p>
<a id="more"></a>
<h2 id="实践">实践</h2>
<p>相信实践出真理。</p>
<h3 id="抓取官方下载链接">抓取官方下载链接</h3>
<p>由于前段时间的 Xcode Ghost 影响，不能再信任第三方的网盘， 通过 Charles 抓取到的链接如下：
  <br><a href="http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg" target="_blank" rel="external">http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg</a></p>
<p><code>ps</code>：为了安全性最好自己抓包获取此下载地址，后面的 hostname、 path 和自己抓取的链接对应。</p>
<h3 id="下载-pkg文件">下载.pkg文件</h3>
<p>抓取到苹果官方的下载链接后，可以先离线到百度云分流我们可以通过第三方下载工具下载 .pkg 文件，下载工具自备。
  <br>下载完成后文件是无法直接安装的，所以我们要准备欺骗 App Store 把静态文件 server 映射到本地。
  <br>下面要做的就是搭建本地静态文件 server 替换苹果官方的 server。</p>
<h3 id="搭建静态文件server">搭建静态文件server</h3>
<p>搭建本地静态资源服务的方法太多了，e.g. 现成的就有nginx、apache；程序有 nodejs、python、java etc.
  <br>本教程选择熟悉的<a href="http://expressjs.com/" target="_blank" rel="external">express</a>，只需一个中间件即可搞定，搭建node环境，不再赘述。</p>
<h3 id="分析url">分析url</h3>
<p>url格式：
  <br>
  <figure class="highlight avrasm">
    <table>
      <tr>
        <td class="code"><pre><span class="line"><span class="label">protocol:</span>// hostname[:port]/path[?query]<span class="preprocessor">#hash</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>在这里我们只需要找到 hostname 和 path；</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="code"><pre><span class="line">hostname : osxapps.itunes.apple.com</span><br><span class="line">path     : /apple-assets-us-<span class="built_in">std</span>-<span class="number">000001</span>/Purple3/v4/<span class="number">74</span>/d2/<span class="number">82</span>/<span class="number">74</span>d28291-<span class="number">9</span>db9-<span class="number">7</span>ae2-<span class="number">305</span>d-<span class="number">9</span>b8b3f5fd463/</span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="修改hosts">修改hosts</h3>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td>
    </tr>
  </table>
</figure>
<img src="/2015/10/02/mac-osx-capitan/hosts.png" alt="[hosts]" title="[hosts]">
<p>如此一来，系统 DNS 将把 osxapps.itunes.apple.com 解析到本地。</p>
<h3 id="创建express项目">创建express项目</h3>
<p>万事俱备，只欠exprss。</p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-project // 任意名称</span><br><span class="line">$ mkdir static</span><br><span class="line">$ npm install express</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>手动将下载好的.pkg文件拷贝到项目的static文件夹，在项目文件夹根目录创建server.js：</p>
<figure class="highlight js">
  <table>
    <tr>
      <td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// 映射资源</span></span><br><span class="line">app.use(<span class="string">'/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/'</span>, express.static(path.resolve(<span class="string">'.'</span>, <span class="string">'static'</span>)));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server Listen on port 80."</span>);</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>启动程序
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-project</span><br><span class="line">$ sudo node server.js</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>此时你可以在浏览器中测试，在地址栏输入我们抓取的苹果官方的下载链接，如果一切配置都正确，你应该会看到百兆的下载速度。
  <br><a href="http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg" target="_blank" rel="external">http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg</a></p>
<img src="/2015/10/02/mac-osx-capitan/pkg.jpeg" alt="[下载速度]" title="[下载速度]">
<h3 id="更新_El_Capitan">更新 El Capitan</h3>
<p>打开 App Store 找到 OS X El Capitan 的更新按钮, 点击更新按钮。稍等片刻，下载完成后就会弹出安装页面。
  <br>安装过程需要一段时间,冲杯咖啡等待即可。</p>
<p>enjoy yourself …</p>
<h3 id="还原hosts">还原hosts</h3>
<p>记得一定要还原hosts设置，不然以后 App Store 就更新不了，方法就是删除掉上文配置的映射，保存即可。</p>
<h2 id="引申">引申</h2>
<p>如果有vps的话，也下载到自己的vps上，然后将苹果的下载地址解析到vps ，原理相通。</p>
<h2 id="参考">参考</h2>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="external">URL</a>
  <br><a href="http://coolshell.cn/articles/1480.html" target="_blank" rel="external">SimpleHTTPServer</a>
  <br><a href="https://zh.wikipedia.org/wiki/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="external">hosts 文件</a></p>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前奏">前奏</h2>
<p>总所周知，<a href="#">app store</a> 国内下载速度实在不敢恭维，然而系统升级一般没个一天是搞不定的（心中有一万只草泥马在奔腾ಥ_ಥ）。
  <br>但是，你们天真地以为这就能难倒技术控了么？23333…</p>
<p>今天小弟就给看官们带来一次全新体验。</p>
<h2 id="原理">原理</h2>
<p>抓取苹果官方下载链接，离线到第三方服务器分流。再使用第三方下载工具下载系统<code>.pkg</code>文件。搭建本地静态文件<code>server</code>，
  <br>将苹果官方的下载地址解析到本地的服务器，从而实现快速下载安装。</p>
<p>抓取工具首推charles（本人和charles不存在隶属关系^.^）。</p>
<p><code>ps</code>：以上适用于 El Capitan 更新慢的用户，有百兆光纤的用户可忽略。</p>]]>
    
    </summary>
    
      <category term="osx" scheme="http://yoursite.com/tags/osx/"/>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tips For npm — npm publish]]></title>
    <link href="http://yoursite.com/2015/09/27/web-npm_publish/"/>
    <id>http://yoursite.com/2015/09/27/web-npm_publish/</id>
    <published>2015-09-26T16:43:27.000Z</published>
    <updated>2015-09-29T06:07:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>
  <a id="more"></a>
</p>
<h2 id="npm安装">npm安装</h2>
<p>安装nodejs，npm默认作为全局模块，由于本文主要讲述发布npm到包管理中心，不再赘述。
  <br>建议使用nvm安装并管理nodejs版本。<a href="https://github.com/cnpm/nvm" target="_blank" rel="external">参考资料</a></p>
<h2 id="发布npm模块">发布npm模块</h2>
<p>安装完npm后，打开终端输入npm，马上就能使用npm提供的cli功能，如图：
  <br><img src="/2015/09/27/web-npm_publish/npm-cli.png" alt="[npm cli]" title="[npm cli]">
  <br>引入正文，如何发布module？ npm遵循cmd规范，publish前会读取当前目录package.json，匹配version、github信息 etc. （ps：任何一个npm模块源码根目录都会有一个package.json文件供参考）</p>
<p>btw 首次发布需要先添加本地npm用户信息，添加后本地将缓存当前通过验证的用户。
  <br>ps：如果使用nrm工具管理源，需先切回npm官方源：<code>nrm use npm</code>，再次发布跳过此步骤：
  <br>
  <figure class="highlight coffeescript">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ sudo <span class="built_in">npm</span> adduser</span><br><span class="line">$ sudo <span class="built_in">npm</span> whoami</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>正式发布：
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your project</span><br><span class="line">$ vi package.json // 修改版本号</span><br><span class="line">$ sudo npm publsh</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>至此，我们已经成功把module发布到了 <a href="https://www.npmjs.com" target="_blank" rel="external">https://www.npmjs.com</a>，是不是很简单，快动手把自己的module也贡献出来吧。
  <br>btw 假设发布太频繁，<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>网站用到了缓存（hold on），稍后便可以看到更新的模块。</p>
<h2 id="引申">引申</h2>
<ul>
  <li>发布模块时，需要更新package版本信息，由于本人比较好奇就去研究了npm版本号规则。</li>
  <li>module源码托管在git服务提供商，如何提交一个tag/issue，自动发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</li>
</ul>
<h3 id="关于package版本号">关于package版本号</h3>
<p>npm社区版本号规则采用的是semver(语义化版本)，主要规则如下：</p>
<pre><code>版本格式：主版号.次版号.修订号，版号递增规则如下：
    主版号：当你做了不相容的 API 修改，
    次版号：当你做了向下相容的功能性新增，
    修订号：当你做了向下相容的问题修正。
    先行版号及版本编译资讯可以加到「主版号.次版号.修订号」的后面，作为延伸。
</code></pre>
<h3 id="关于github托管Hooks">关于github托管Hooks</h3>
<p>其实就是实现git服务提供商给hooks接口，e.g github提供的提交某个issue就会促发hook，实现此hook只需一个脚本去发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</p>
<p>以github为例，仅给出参考：</p>
<ul>
  <li><a href="https://github.com/SegmentFault/deploy-robot" target="_blank" rel="external">https://github.com/SegmentFault/deploy-robot</a></li>
  <li><a href="http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/" target="_blank" rel="external">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/</a></li>
</ul>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>]]>
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="web技术" scheme="http://yoursite.com/categories/web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
