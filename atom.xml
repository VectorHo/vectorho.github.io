<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[VectorHo]]></title>
  <subtitle><![CDATA[here we go]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-02T00:43:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Vector Ho]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[OS X El Capitan 快速更新]]></title>
    <link href="http://yoursite.com/2015/10/02/mac-osx-capitan/"/>
    <id>http://yoursite.com/2015/10/02/mac-osx-capitan/</id>
    <published>2015-10-01T23:26:19.000Z</published>
    <updated>2015-10-02T00:43:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前奏">前奏</h2>
<p>总所周知，<a href="#">app store</a> 国内下载速度实在不敢恭维，然而系统升级一般没个一天是搞不定的（心中有一万只草泥马在奔腾ಥ_ಥ）。
  <br>但是，你们天真地以为这就能难倒技术控了么？23333…</p>
<p>今天小弟就给看官们带来一次全新体验。</p>
<h2 id="原理">原理</h2>
<p>抓取苹果官方下载链接，离线到第三方服务器分流。再使用第三方下载工具下载系统<code>.pkg</code>文件。搭建本地静态文件<code>server</code>，
  <br>将苹果官方的下载地址解析到本地的服务器，从而实现快速下载安装。</p>
<p>抓取工具首推charles（本人和charles不存在隶属关系^.^）。</p>
<p><code>ps</code>：以上适用于 El Capitan 更新慢的用户，有百兆光纤的用户可忽略。</p>
<a id="more"></a>
<h2 id="实践">实践</h2>
<p>相信实践出真理。</p>
<h3 id="抓取官方下载链接">抓取官方下载链接</h3>
<p>由于前段时间的 Xcode Ghost 影响，不能再信任第三方的网盘， 通过 Charles 抓取到的链接如下：
  <br><a href="http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg" target="_blank" rel="external">http://osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/ftk3252456602304584541.pkg</a></p>
<p><code>ps</code>：为了安全性最好自己抓包获取此下载地址，后面的 hostname、 path 和自己抓取的链接对应。</p>
<h3 id="下载-pkg文件">下载.pkg文件</h3>
<p>抓取到苹果官方的下载链接后，可以先离线到百度云分流我们可以通过第三方下载工具下载 .pkg 文件，下载工具自备。
  <br>下载完成后文件是无法直接安装的，所以我们要准备欺骗 App Store 把静态文件 server 映射到本地。
  <br>下面要做的就是搭建本地静态文件 server 替换苹果官方的 server。</p>
<h3 id="搭建静态文件server">搭建静态文件server</h3>
<p>搭建本地静态资源服务的方法太多了，e.g. 现成的就有nginx、apache；程序有 nodejs、python、java etc.
  <br>本教程选择熟悉的<a href="http://expressjs.com/" target="_blank" rel="external">express</a>，只需一个中间件即可搞定，搭建node环境，不再赘述。</p>
<h3 id="分析url">分析url</h3>
<p>url格式：
  <br>
  <figure class="highlight avrasm">
    <table>
      <tr>
        <td class="code"><pre><span class="line"><span class="label">protocol:</span>// hostname[:port]/path[?query]<span class="preprocessor">#hash</span></span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>在这里我们只需要找到 hostname 和 path；</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="code"><pre><span class="line">hostname : osxapps.itunes.apple.com</span><br><span class="line">path     : /apple-assets-us-<span class="built_in">std</span>-<span class="number">000001</span>/Purple3/v4/<span class="number">74</span>/d2/<span class="number">82</span>/<span class="number">74</span>d28291-<span class="number">9</span>db9-<span class="number">7</span>ae2-<span class="number">305</span>d-<span class="number">9</span>b8b3f5fd463/</span><br></pre></td>
    </tr>
  </table>
</figure>
<h3 id="修改hosts">修改hosts</h3>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td>
    </tr>
  </table>
</figure>
<img src="/2015/10/02/mac-osx-capitan/hosts.png" alt="[hosts]" title="[hosts]">
<p>如此一来，系统 DNS 将把 osxapps.itunes.apple.com 解析到本地。</p>
<h3 id="创建express项目">创建express项目</h3>
<p>万事俱备，只欠exprss。</p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-project // 任意名称</span><br><span class="line">$ mkdir static</span><br><span class="line">$ npm install express</span><br></pre></td>
    </tr>
  </table>
</figure>
<p>手动将下载好的.pkg文件拷贝到项目的static文件夹，在项目文件夹根目录创建server.js：</p>
<figure class="highlight js">
  <table>
    <tr>
      <td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// 映射资源</span></span><br><span class="line">app.use(<span class="string">'/apple-assets-us-std-000001/Purple3/v4/74/d2/82/74d28291-9db9-7ae2-305d-9b8b3f5fd463/'</span>, express.static(path.resolve(<span class="string">'.'</span>, <span class="string">'static'</span>)))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>);</span><br><span class="line"><span class="built_in">console</span>.log <span class="string">"Server Listen on port 80."</span></span><br></pre></td>
    </tr>
  </table>
</figure>
<p>启动程序
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-project</span><br><span class="line">$ sudo node server.js</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>此时你可以在浏览器中测试，在地址栏输入我们抓取的苹果官方的下载链接，如果一切配置都正确，你应该会看到百兆的下载速度。</p>
<img src="/2015/10/02/mac-osx-capitan/pkg.jpeg" alt="[下载速度]" title="[下载速度]">
<h3 id="更新_El_Capitan">更新 El Capitan</h3>
<p>打开 App Store 找到 OS X El Capitan 的更新按钮, 点击更新按钮。稍等片刻，下载完成后就会弹出安装页面。
  <br>安装过程需要一段时间,冲杯咖啡等待即可。</p>
<p>enjoy yourself …</p>
<h3 id="还原hosts">还原hosts</h3>
<p>记得一定要还原hosts设置，不然以后 App Store 就更新不了，方法就是删除掉上文配置的映射，保存即可。</p>
<h2 id="引申">引申</h2>
<p>如果有vps的话，也下载到自己的vps上，然后将苹果的下载地址解析到vps ，原理相通。</p>
<h2 id="参考">参考</h2>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="external">URL</a>
  <br><a href="http://coolshell.cn/articles/1480.html" target="_blank" rel="external">SimpleHTTPServer</a>
  <br><a href="https://zh.wikipedia.org/wiki/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="external">hosts 文件</a></p>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前奏">前奏</h2>
<p>总所周知，<a href="#">app store</a> 国内下载速度实在不敢恭维，然而系统升级一般没个一天是搞不定的（心中有一万只草泥马在奔腾ಥ_ಥ）。
  <br>但是，你们天真地以为这就能难倒技术控了么？23333…</p>
<p>今天小弟就给看官们带来一次全新体验。</p>
<h2 id="原理">原理</h2>
<p>抓取苹果官方下载链接，离线到第三方服务器分流。再使用第三方下载工具下载系统<code>.pkg</code>文件。搭建本地静态文件<code>server</code>，
  <br>将苹果官方的下载地址解析到本地的服务器，从而实现快速下载安装。</p>
<p>抓取工具首推charles（本人和charles不存在隶属关系^.^）。</p>
<p><code>ps</code>：以上适用于 El Capitan 更新慢的用户，有百兆光纤的用户可忽略。</p>]]>
    
    </summary>
    
      <category term="osx" scheme="http://yoursite.com/tags/osx/"/>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tips For npm — npm publish]]></title>
    <link href="http://yoursite.com/2015/09/27/web-npm_publish/"/>
    <id>http://yoursite.com/2015/09/27/web-npm_publish/</id>
    <published>2015-09-26T16:43:27.000Z</published>
    <updated>2015-09-29T06:07:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>
  <a id="more"></a>
</p>
<h2 id="npm安装">npm安装</h2>
<p>安装nodejs，npm默认作为全局模块，由于本文主要讲述发布npm到包管理中心，不再赘述。
  <br>建议使用nvm安装并管理nodejs版本。<a href="https://github.com/cnpm/nvm" target="_blank" rel="external">参考资料</a></p>
<h2 id="发布npm模块">发布npm模块</h2>
<p>安装完npm后，打开终端输入npm，马上就能使用npm提供的cli功能，如图：
  <br><img src="/2015/09/27/web-npm_publish/npm-cli.png" alt="[npm cli]" title="[npm cli]">
  <br>引入正文，如何发布module？ npm遵循cmd规范，publish前会读取当前目录package.json，匹配version、github信息 etc. （ps：任何一个npm模块源码根目录都会有一个package.json文件供参考）</p>
<p>btw 首次发布需要先添加本地npm用户信息，添加后本地将缓存当前通过验证的用户。
  <br>ps：如果使用nrm工具管理源，需先切回npm官方源：<code>nrm use npm</code>，再次发布跳过此步骤：
  <br>
  <figure class="highlight coffeescript">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ sudo <span class="built_in">npm</span> adduser</span><br><span class="line">$ sudo <span class="built_in">npm</span> whoami</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>正式发布：
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your project</span><br><span class="line">$ vi package.json // 修改版本号</span><br><span class="line">$ sudo npm publsh</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>至此，我们已经成功把module发布到了 <a href="https://www.npmjs.com" target="_blank" rel="external">https://www.npmjs.com</a>，是不是很简单，快动手把自己的module也贡献出来吧。
  <br>btw 假设发布太频繁，<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>网站用到了缓存（hold on），稍后便可以看到更新的模块。</p>
<h2 id="引申">引申</h2>
<ul>
  <li>发布模块时，需要更新package版本信息，由于本人比较好奇就去研究了npm版本号规则。</li>
  <li>module源码托管在git服务提供商，如何提交一个tag/issue，自动发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</li>
</ul>
<h3 id="关于package版本号">关于package版本号</h3>
<p>npm社区版本号规则采用的是semver(语义化版本)，主要规则如下：</p>
<pre><code>版本格式：主版号.次版号.修订号，版号递增规则如下：
    主版号：当你做了不相容的 API 修改，
    次版号：当你做了向下相容的功能性新增，
    修订号：当你做了向下相容的问题修正。
    先行版号及版本编译资讯可以加到「主版号.次版号.修订号」的后面，作为延伸。
</code></pre>
<h3 id="关于github托管Hooks">关于github托管Hooks</h3>
<p>其实就是实现git服务提供商给hooks接口，e.g github提供的提交某个issue就会促发hook，实现此hook只需一个脚本去发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</p>
<p>以github为例，仅给出参考：</p>
<ul>
  <li><a href="https://github.com/SegmentFault/deploy-robot" target="_blank" rel="external">https://github.com/SegmentFault/deploy-robot</a></li>
  <li><a href="http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/" target="_blank" rel="external">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/</a></li>
</ul>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>]]>
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="web技术" scheme="http://yoursite.com/categories/web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
