<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[VectorHo]]></title>
  <subtitle><![CDATA[here we go]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-29T06:07:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Vector Ho]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Tips For npm — npm publish]]></title>
    <link href="http://yoursite.com/2015/09/27/web-npm_publish/"/>
    <id>http://yoursite.com/2015/09/27/web-npm_publish/</id>
    <published>2015-09-26T16:43:27.000Z</published>
    <updated>2015-09-29T06:07:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>
  <a id="more"></a>
</p>
<h2 id="npm安装">npm安装</h2>
<p>安装nodejs，npm默认作为全局模块，由于本文主要讲述发布npm到包管理中心，不再赘述。
  <br>建议使用nvm安装并管理nodejs版本。<a href="https://github.com/cnpm/nvm" target="_blank" rel="external">参考资料</a></p>
<h2 id="发布npm模块">发布npm模块</h2>
<p>安装完npm后，打开终端输入npm，马上就能使用npm提供的cli功能，如图：
  <br><img src="/2015/09/27/web-npm_publish/npm-cli.png" alt="[npm cli]" title="[npm cli]">
  <br>引入正文，如何发布module？ npm遵循cmd规范，publish前会读取当前目录package.json，匹配version、github信息 etc. （ps：任何一个npm模块源码根目录都会有一个package.json文件供参考）</p>
<p>btw 首次发布需要先添加本地npm用户信息，添加后本地将缓存当前通过验证的用户。
  <br>ps：如果使用nrm工具管理源，需先切回npm官方源：<code>nrm use npm</code>，再次发布跳过此步骤：
  <br>
  <figure class="highlight coffeescript">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ sudo <span class="built_in">npm</span> adduser</span><br><span class="line">$ sudo <span class="built_in">npm</span> whoami</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>正式发布：
  <br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your project</span><br><span class="line">$ vi package.json // 修改版本号</span><br><span class="line">$ sudo npm publsh</span><br></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>至此，我们已经成功把module发布到了 <a href="https://www.npmjs.com" target="_blank" rel="external">https://www.npmjs.com</a>，是不是很简单，快动手把自己的module也贡献出来吧。
  <br>btw 假设发布太频繁，<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>网站用到了缓存（hold on），稍后便可以看到更新的模块。</p>
<h2 id="引申">引申</h2>
<ul>
  <li>发布模块时，需要更新package版本信息，由于本人比较好奇就去研究了npm版本号规则。</li>
  <li>module源码托管在git服务提供商，如何提交一个tag/issue，自动发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</li>
</ul>
<h3 id="关于package版本号">关于package版本号</h3>
<p>npm社区版本号规则采用的是semver(语义化版本)，主要规则如下：</p>
<pre><code>版本格式：主版号.次版号.修订号，版号递增规则如下：
    主版号：当你做了不相容的 API 修改，
    次版号：当你做了向下相容的功能性新增，
    修订号：当你做了向下相容的问题修正。
    先行版号及版本编译资讯可以加到「主版号.次版号.修订号」的后面，作为延伸。
</code></pre>
<h3 id="关于github托管Hooks">关于github托管Hooks</h3>
<p>其实就是实现git服务提供商给hooks接口，e.g github提供的提交某个issue就会促发hook，实现此hook只需一个脚本去发布到<a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>。</p>
<p>以github为例，仅给出参考：</p>
<ul>
  <li><a href="https://github.com/SegmentFault/deploy-robot" target="_blank" rel="external">https://github.com/SegmentFault/deploy-robot</a></li>
  <li><a href="http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/" target="_blank" rel="external">http://blog.coderzh.com/2015/09/13/use-webhook-automated-deploy-hugo/</a></li>
</ul>
<hr>
<p>博客：<a href="https://vectorho.github.io" target="_blank" rel="external">https://vectorho.github.io</a>
  <br>作者：<a href="https://vectorho.github.io/about/" target="_blank" rel="external">Vector Ho</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是NPM">什么是NPM</h2>
<p><a href="https://www.npmjs.com/">npm</a> is the package manager for javascript.
  <br>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</p>
<p>如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。</p>
<p>Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。
  <br>]]>
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="web技术" scheme="http://yoursite.com/categories/web%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
